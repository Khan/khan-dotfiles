################################################################################
# Khan Academy specific .bash_profile
#
# The difference between .bash_profile and .profile is that the latter
# is called for all sh-compatible shells.  So we put bashisms here
# and non-bashisms in .profile.
#
# According to the bash manpage, if both .bash_profile and .profile
# exist, bash only reads the first one.  So we have to source .profile
# manually.

if [ -z "$KA_DOTFILES_PROFILE_SOURCED" ]; then
   # We check and then set this environment variable to ensure that we source
   # .profile only once.  Depending on a user's dotfile configuration, it
   # might otherwise be possible to create an infinite loop of sourcing.
   export KA_DOTFILES_PROFILE_SOURCED=1
   if [ -s ~/.profile ]; then
      source ~/.profile
   fi
fi
unset KA_DOTFILES_PROFILE_SOURCED

# Figure out what directory we're *really* in (following symlinks).
# We need this because *-completion.bash are siblings to this script.
# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do   # follow symlinks
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"    # resolve relative symlink
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Enable autocompletion for git
source "$DIR/git-completion.bash"
# Similarly for gcloud, if available
if ! which gcloud >/dev/null; then
    GCLOUD_COMPLETION_FILE="$(basename "$(basename gcloud)")/completion.bash.inc"
    if [ -f "$GCLOUD_COMPLETION_FILE" ]; then
        source "$GCLOUD_COMPLETION_FILE"
    fi
fi

# Add a brew86 alias if we're on an ARM architecture Mac
if [ "$(uname -s)" = "Darwin" ] && [ "$(uname -m)" = "arm64" ]; then
  alias brew86="arch -x86_64 /usr/local/bin/brew $@"
fi

# Add a mykeeper alias to run keeper with KA config
alias mykeeper="keeper --config $HOME/.keeper-config.json"

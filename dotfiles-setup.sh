#!/bin/bash

# This installs dotfiles, which are the same on Linux, OS X, maybe even cygwin.
# It is intended to be idempotent; you can safely run it multiple
# times.  It should be run from the root of the khan-dotfiles directory.


# Bail on any errors
set -e

# Install in $HOME by default, but can set an alternate destination via $1.
ROOT=${1-$HOME}
mkdir -p "$ROOT"

# Load shared setup functions.
. ./shared-functions.sh

install_dotfiles() {
    echo "Installing and updating dotfiles (.bashrc, etc)"
    # Remove cached variables in case user did migration assistant
    # It will be regenerated by .profile.khan
    rm -rf ~/.config/khan/cache/dotfiles

    # Most dotfiles are installed as symlinks.
    # (But we ignore .git/.arc*/etc which are actually part of the repo!)
    #
    # TODO(mroth): for organization, we should keep all dotfiles in a
    # subdirectory, but to make that change will require repairing old symlinks
    # so they don't break when the target moves.
    for file in .*.khan .*.khan-xtra .git_template/commit_template .vim/ftplugin/*.vim; do
        mkdir -p "$ROOT/$(dirname "$file")"
        source=$(pwd)/"$file"
        dest="$ROOT/$file"
        # if dest is already a symlink pointing to correct source, skip it
        if [ -h "$dest" -a "$(readlink "$dest")" = "$source" ]; then
            :
        # else if dest already exists, warn user and skip dotfile
        elif [ -e "$dest" ]; then
            add_warning "Not symlinking to $dest because it already exists."
        # otherwise, verbosely symlink the file (with --force)
        else
            ln -sfvn "$source" "$dest"
        fi
    done

    # A few dotfiles are copied so the user can change them.  They all
    # have names like bashrc.default, which is installed as .bashrc.
    # They all have the property they 'include' khan-specific code.
    for file in *.default; do
        dest="$ROOT/.$(echo "$file" | sed s/.default$//)"  # foo.default -> .foo
        ka_version=.$(echo "$file" | sed s/default/khan/)  # .bashrc.khan, etc.
        if [ ! -e "$dest" ]; then
            cp -f "$file" "$dest"
        elif ! fgrep -q "$ka_version" "$dest"; then
            echo "WARNING: $dest does not 'include' $ka_version;"
            echo "         (see $(pwd)/$file and add the contents to $dest)"
            should_append=$(get_yn_input "Should we append $file to $dest so things work as expected?" "y")
            if [ "$should_append" = "y" ]; then
                cat "$file" >> "$dest"
            fi
        fi
    done

    # If users are using a shell other than bash, the updates we make won't
    # get picked up.  They'll have to activate the virtualenv in their shell
    # config; if they haven't, the rest of the script will fail.
    # TODO(benkraft): Add more specific instructions for other common shells,
    # or just write dotfiles for them.
    shell="`basename "$SHELL"`"
    if [ -z "$VIRTUAL_ENV" ] && [ "$shell" != bash ] && [ "$shell" != zsh ]; then
        add_fatal_error "Your default shell is $shell, not bash or zsh, so you'll" \
                        "need to update its config manually to activate our" \
                        "virtualenv. You can follow the instructions at" \
                        "khanacademy.org/r/virtualenvs to create a new" \
                        "virtualenv and then export its path in the" \
                        "VIRTUAL_ENV environment variable before trying again."
    fi

    # *.template files are also copied so the user can change them.  Unlike the
    # "default" files above, these do not include KA code, they are merely
    # useful defaults we want to install if the user doesnt have anything
    # already.
    #
    # We should avoid installing anything absolutely not necessary in this
    # category, so for now, this is just a global .gitignore
    for file in *.template; do
        dest="$ROOT/.$(echo "$file" | sed s/.template$//)"  # foo.default -> .foo
        if [ ! -e "$dest" ]; then
            cp -f "$file" "$dest"
        fi
    done

    # Make sure we pick up any changes we've made, so later steps of install don't fail.
    . ~/.profile
}


install_dotfiles

trap - EXIT
